version: '3.8'


services:
  postgres:
    container_name: postgres
    image: postgres:16.0
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=superpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 100s
      retries: 5
    networks:
      - backend

  vendor-order-service:
    container_name: vendor-order-service

    build:
      context: ./backend
      args:
      - DATABASE_URL=postgresql://vo_admin:adminpass@postgres:5432/vendor_orders?schema=public&connect_timeout=300&pool_timeout=30&socket_timeout=30
    image: vendor-order-service:version1
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

    environment:
      - NODE_ENV=production
      - LOG_LEVEL=debug
      - PORT=3000
      - DATABASE_URL=postgresql://vo_admin:adminpass@postgres:5432/vendor_orders
      - FRONT_END_URL=http://localhost:8000
      - DESCOPE_PROJECT_ID=P2WDwTMRVKSAP9OqS7GI7PW5BjX9
    ports:
      - "3000:3000"


  frontend:
    build: ./frontend
    depends_on:
      - vendor-order-service
    environment:
    - NODE_ENV=production
    - PORT=8000
    - VITE_API_ENDPOINT=http://localhost:3000/api/v1
    - VITE_DESCOPE_PROJECT_ID=P2WDwTMRVKSAP9OqS7GI7PW5BjX9
    ports:
      - "8000:8000"

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
